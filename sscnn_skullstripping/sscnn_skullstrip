#!/usr/bin/env python

import os
import argparse
import nibabel as nib
import numpy as np
import collections
import psutil
import traceback
import skimage.measure
import freesurfer as fs

from sscnn_skullstripping.deeplearn_utils import DeepImageSynth


# parse args
parser = argparse.ArgumentParser(description='skull strip an infant MRI volume')
parser.add_argument('-i', '--input-file', required=True)
parser.add_argument('-o', '--output-dir', required=True)
parser.add_argument('-c', '--contrast', required=True)
parser.add_argument('--gpu', type=int, default=-1, help='GPU number - if not supplied, CPU is used')
args = parser.parse_args()

# prepare output directory
os.makedirs(args.output_dir, exist_ok=True)

# check input image
input_file = os.path.abspath(args.input_file)
if not os.path.isfile(input_file):
    fs.fatal('input file %s does not exist' % input_file)

# conform input image
conformed_file = os.path.join(args.output_dir, 'conformed.nii.gz')
if fs.run('mri_convert --conform %s %s' % (input_file, conformed_file)) != 0:
    fs.fatal('could not conform input image')

# check for total available memory at the beginning, in case things
# fail later (this script is extremely memory-intensive)
avail_mem = int(psutil.virtual_memory().available * 1e-9)

# device handling
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'
os.environ['CUDA_VISIBLE_DEVICES'] = str(args.gpu)

# get model files
model_dir = os.environ.get('SSCNN_MODEL_DIR')
if model_dir is None:
  model_dir = os.path.join(fs.fshome(), 'average', 'sscnn_skullstripping')
if not os.path.exists(model_dir):
    model_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'model_files')
if not os.path.exists(model_dir):
    fs.fatal('cannot find model directory')

# configure model parameters
brain_labels = [0, 1]
direction_fullnames = {
    'ax':  'axial',
    'cor': 'coronal',
    'sag': 'sagittal'
}

def predict(direction):
    net = DeepImageSynth.DeepImageSynth.from_file(
        os.path.join(model_dir, '%s_sscnn.h5' % direction),
        'dice_coef_loss2',
        net='unet_2d_v1',
        n_labels=len(brain_labels),
        labels=brain_labels,
        storage_loc='disk',
        temp_folder=args.output_dir,
        rob_standardize=True,
        wmp_standardize=False
    )
    net.rob_standardize = True
    net.wmp_standardize = False
    out_membership_file = os.path.join(args.output_dir, 'sscnn_%s_prob.mgz' % direction)
    out_hard_file = os.path.join(args.output_dir, 'sscnn_%s_label.mgz' % direction)
    net.predict_slice_segmentation([conformed_file], [args.contrast], direction_fullnames[direction], out_membership_file, out_hard_file)
    return nib.load(out_membership_file).get_data()

# predict segs for each direction
try:
    cor_img_data = predict('cor')
    ax_img_data  = predict('ax')
    sag_img_data = predict('sag')
except:
    print(traceback.format_exc())
    if avail_mem < 20:
        msg = 'Slice prediction failed. Infant skull-stripping requires roughly 20 GB' \
             f' of virtual memory, but only ~{avail_mem} GB of available memory was originally' \
              ' detected. If this estimate is correct, you should run this tool on a' \
              ' machine with more memory.'
        fs.fatal(msg)
    else:
        fs.fatal('Could not run slice prediction.')


# convert prob segs to combined hard seg
cor_img_data     = cor_img_data[..., 1]
cor_ax_img_data  = np.transpose(ax_img_data[..., 1], (0, 2, 1))
cor_sag_img_data = np.transpose(sag_img_data[..., 1], (2, 1, 0))

# combine
combine_img_data = \
    0.44 * cor_img_data + \
    0.33 * cor_sag_img_data + \
    0.23 * cor_ax_img_data

hard_img_data = np.zeros(combine_img_data.shape)
hard_img_data[combine_img_data > 0.5] = 1

# add a post processing function to only choose the largest connected component
label_img_data = skimage.measure.label(np.int8(hard_img_data), neighbors=8)
freq = collections.Counter(label_img_data.flatten())

l_idx = np.argmax(list(freq.values())[1:])
big_label = list(freq.keys())[1:][l_idx]
hard_img_data[label_img_data != big_label] = 0

# save skullstripped image
input_image = nib.load(conformed_file)
output_image = nib.Nifti1Image(hard_img_data, input_image.affine, input_image.header)
nib.save(output_image, os.path.join(args.output_dir, 'sscnn_skullstrip.nii.gz'))
