#!/usr/bin/env python3

###########################
#
# Takes inputs required for `kvlBuildAtlasMesh` and a training schedule
# and makes repeated calls to `kvlBuildAtlasMesh` according to the training
# schedule, using the output of one call to `kvlBuildAtlasMesh` as input to the
# next (via `explicitStartCollection`)
###########################

import os
import sys
import argparse
import tempfile
import errno

def parse_args(args):
  parser = argparse.ArgumentParser()
  parser.add_argument('-n','--num-upsamples', required=True, \
                      help='The number of upsapmling steps for `kvlBuildAtlasMesh` to perform.')
  parser.add_argument('-m','--mesh-size', nargs=3, required=True, \
                      help='The mesh size (x, y, z) to pass to `kvlBuildAtlasMesh`.')
  parser.add_argument('-s','--schedule-file', required=False, default=None, \
                      help='Filename containing the training schedule for sucessive calls to `kvlBuildAtlasMesh`')
  parser.add_argument('-w', '--work-dir', required=False, default=None, \
                      help='Directory under which to keep output and intermediary files (will be created)')
  parser.add_argument('-b', '--binary', required=False, default=None, \
                      help='Location of `kvlBuildAtlasMesh` binary')
  
  args = parser.parse_args()
  if args.schedule_file is None:
    args.schedule = default_training_schedule()
  else:
    args.schedule = read_schedule_file(args.schedule_file)
    
  if args.binary is None:
    if os.environ.get('FREESURFER_HOME'):
      args.binary = os.path.join(os.environ.get('FREESURFER_HOME'),'gems/bin/kvlBuildAtlasMesh')
  if args.binary is None or not os.path.exists(args.binary):
    print("gems_train_mesh:  ERROR: Can't find kvlBuildAtlasMesh, either set the FREESURFER_HOME env var or use -b")
    raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), args.binary)

  if args.work_dir is None:
    args.work_dir = tempfile.mkdtemp()
    print("gems_train_mesh:  No workdir specified so using "+args.work_dir)
  else:
    os.makedirs(args.work_dir, exist_ok=True)
  
  return args

# The training shedule format is a list of list, eg:
# [ [num_itr, stiffness, edgeCollaseFactor],
#   [num_itr, stiffness, edgeCollaseFactor] ]
def default_training_schedule():
  return [ [1, 1.0, 1.0],
           [10, 0.1, 1.25] ]

def read_schedule_file(filename):
  with open(filename) as f:
    schedule = [[float(x) for x in line.split()] for line in f]
  for epoch in schedule:
    # Every line of the training schedule should have three values:
    #   - num itr
    #   - stiffness
    #   - edge collapse factot
    assert(len(epoch) == 3)  
  return schedule
  
def run_kvlBuildAtlasMesh(binary, work_dir, num_itr=5, stiffness=1.0, edgeCollapse=1.0, startCollection=None):
  print(binary+' ')
  return "/foo/bar"

def main(argv):
  args = parse_args(argv)
  startCollection = None
  for epoch in args.schedule:
    kvl_num_itr = int(epoch[0])
    kvl_stiffness = float(epoch[1])
    kvl_edge_collapse = float(epoch[2])

    startCollection = run_kvlBuildAtlasMesh(\
                            binary=args.binary, \
                            work_dir=args.work_dir, \
                            num_itr=kvl_num_itr, \
                            stiffness=kvl_stiffness, \
                            edgeCollapse=kvl_edge_collapse, \
                            startCollection=startCollection)
    
if __name__ == "__main__":
  sys.exit(main(sys.argv))

